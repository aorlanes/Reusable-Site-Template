{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst EMPTY_OBJECT = {};\n\nconst NOOP = () => {};\n\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\n\nconst defaultIsItemDisabled = () => false;\n\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\n\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\n\n\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer\n  } = params;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n\n      getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]); // This gets called whenever a reducer changes the state.\n\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]); // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : defaultReducer;\n  const actionContext = React.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  })); // introducing refs to avoid recreating the getItemState function on each change.\n\n  const latestSelectedValues = useLatest(selectedValues);\n  const latestHighlightedValue = useLatest(highlightedValue);\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n  }, [items, itemComparer, dispatch]); // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useListChangeNotifiers();\n  React.useEffect(() => {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listRef$current;\n\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n\n  const getItemState = React.useCallback(item => {\n    var _latestSelectedValues;\n\n    const index = items.findIndex(i => itemComparer(i, item));\n    const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(value => value != null && itemComparer(item, value));\n    const disabled = isItemDisabled(item, index);\n    const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    const focusable = focusManagement === 'DOM';\n    return {\n      disabled,\n      focusable,\n      highlighted,\n      index,\n      selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\n\nexport default useList;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","ListActionTypes","defaultReducer","useListChangeNotifiers","useControllableReducer","areArraysEqual","useLatest","useTextNavigation","EMPTY_OBJECT","NOOP","defaultItemComparer","optionA","optionB","defaultIsItemDisabled","defaultItemStringifier","item","String","defaultGetInitialState","highlightedValue","selectedValues","useList","params","controlledProps","disabledItemsFocusable","disableListWrap","focusManagement","getInitialState","getItemDomElement","getItemId","isItemDisabled","rootRef","externalListRef","onStateChange","items","itemComparer","getItemAsString","onChange","onHighlightChange","orientation","pageSize","reducerActionContext","selectionMode","stateReducer","externalReducer","process","env","NODE_ENV","Error","listRef","useRef","handleRef","handleHighlightChange","useCallback","event","value","reason","itemClick","keyDown","textNavigation","_getItemDomElement","focus","stateComparers","useMemo","valuesArray1","valuesArray2","handleStateChange","field","state","listActionContext","initialState","reducer","actionContext","dispatch","handleTextNavigation","searchString","type","latestSelectedValues","latestHighlightedValue","previousItems","useEffect","current","itemsChange","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","createHandleKeyDown","other","_other$onKeyDown","onKeyDown","call","defaultMuiPrevented","keysToPreventDefault","push","includes","key","preventDefault","createHandleBlur","_other$onBlur","_listRef$current","onBlur","contains","relatedTarget","blur","getRootProps","otherHandlers","undefined","tabIndex","ref","getItemState","_latestSelectedValues","index","findIndex","i","selected","some","disabled","highlighted","focusable","contextValue","useDebugValue"],"sources":["/Users/aorlanes/Desktop/projects/vera-sons/Vera-Sons/node_modules/@mui/base/useList/useList.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst EMPTY_OBJECT = {};\nconst NOOP = () => {};\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsItemDisabled = () => false;\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer\n  } = params;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : defaultReducer;\n  const actionContext = React.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n\n  // introducing refs to avoid recreating the getItemState function on each change.\n  const latestSelectedValues = useLatest(selectedValues);\n  const latestHighlightedValue = useLatest(highlightedValue);\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n  }, [items, itemComparer, dispatch]);\n\n  // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useListChangeNotifiers();\n  React.useEffect(() => {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listRef$current;\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  const getItemState = React.useCallback(item => {\n    var _latestSelectedValues;\n    const index = items.findIndex(i => itemComparer(i, item));\n    const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(value => value != null && itemComparer(item, value));\n    const disabled = isItemDisabled(item, index);\n    const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    const focusable = focusManagement === 'DOM';\n    return {\n      disabled,\n      focusable,\n      highlighted,\n      index,\n      selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\nexport default useList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}