{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoHideDuration\", \"children\", \"disableWindowBlurListener\", \"exited\", \"onBlur\", \"onClose\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"slotProps\", \"slots\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ClickAwayListener from '../ClickAwayListener';\nimport composeClasses from '../composeClasses';\nimport { getSnackbarUtilityClass } from './snackbarClasses';\nimport useSnackbar from '../useSnackbar';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base/react-snackbar/)\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [Snackbar API](https://mui.com/base/react-snackbar/components-api/#snackbar)\n */\n\n\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, forwardedRef) {\n  const {\n    autoHideDuration = null,\n    children,\n    disableWindowBlurListener = false,\n    exited = true,\n    onClose,\n    open,\n    resumeHideDuration,\n    slotProps = {},\n    slots = {}\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const classes = useUtilityClasses();\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar(_extends({}, props, {\n    autoHideDuration,\n    disableWindowBlurListener,\n    onClose,\n    open,\n    resumeHideDuration\n  }));\n  const ownerState = props;\n  const Root = slots.root || 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const clickAwayListenerProps = useSlotProps({\n    elementType: ClickAwayListener,\n    externalSlotProps: slotProps.clickAwayListener,\n    additionalProps: {\n      onClickAway\n    },\n    ownerState\n  }); // ClickAwayListener doesn't support ownerState\n\n  delete clickAwayListenerProps.ownerState; // So that we only render active snackbars.\n\n  if (!open && exited) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(ClickAwayListener, _extends({}, clickAwayListenerProps, {\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps, {\n      children: children\n    }))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: PropTypes.bool,\n\n  /**\n   * The prop used to handle exited transition and unmount the component.\n   * @default true\n   */\n  exited: PropTypes.bool,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n\n  /**\n   * The props used for each slot inside the Snackbar.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n      children: PropTypes.element.isRequired,\n      disableReactTree: PropTypes.bool,\n      mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n      onClickAway: PropTypes.func,\n      touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n    })]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Snackbar.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default Snackbar;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","ClickAwayListener","composeClasses","getSnackbarUtilityClass","useSnackbar","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","slots","root","Snackbar","forwardRef","props","forwardedRef","autoHideDuration","children","disableWindowBlurListener","exited","onClose","open","resumeHideDuration","slotProps","other","classes","getRootProps","onClickAway","ownerState","Root","rootProps","elementType","getSlotProps","externalForwardedProps","externalSlotProps","additionalProps","ref","className","clickAwayListenerProps","clickAwayListener","process","env","NODE_ENV","propTypes","number","node","bool","func","shape","oneOfType","element","isRequired","disableReactTree","mouseEvent","oneOf","touchEvent","object"],"sources":["/Users/aorlanes/Desktop/projects/vera-sons/Vera-Sons/node_modules/@mui/base/Snackbar/Snackbar.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoHideDuration\", \"children\", \"disableWindowBlurListener\", \"exited\", \"onBlur\", \"onClose\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"slotProps\", \"slots\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ClickAwayListener from '../ClickAwayListener';\nimport composeClasses from '../composeClasses';\nimport { getSnackbarUtilityClass } from './snackbarClasses';\nimport useSnackbar from '../useSnackbar';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base/react-snackbar/)\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [Snackbar API](https://mui.com/base/react-snackbar/components-api/#snackbar)\n */\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, forwardedRef) {\n  const {\n      autoHideDuration = null,\n      children,\n      disableWindowBlurListener = false,\n      exited = true,\n      onClose,\n      open,\n      resumeHideDuration,\n      slotProps = {},\n      slots = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const classes = useUtilityClasses();\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar(_extends({}, props, {\n    autoHideDuration,\n    disableWindowBlurListener,\n    onClose,\n    open,\n    resumeHideDuration\n  }));\n  const ownerState = props;\n  const Root = slots.root || 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const clickAwayListenerProps = useSlotProps({\n    elementType: ClickAwayListener,\n    externalSlotProps: slotProps.clickAwayListener,\n    additionalProps: {\n      onClickAway\n    },\n    ownerState\n  });\n\n  // ClickAwayListener doesn't support ownerState\n  delete clickAwayListenerProps.ownerState;\n\n  // So that we only render active snackbars.\n  if (!open && exited) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(ClickAwayListener, _extends({}, clickAwayListenerProps, {\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps, {\n      children: children\n    }))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: PropTypes.number,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: PropTypes.bool,\n  /**\n   * The prop used to handle exited transition and unmount the component.\n   * @default true\n   */\n  exited: PropTypes.bool,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n  /**\n   * The props used for each slot inside the Snackbar.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n      children: PropTypes.element.isRequired,\n      disableReactTree: PropTypes.bool,\n      mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n      onClickAway: PropTypes.func,\n      touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n    })]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Snackbar.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default Snackbar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}